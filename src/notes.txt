Schema of the process


## Scanner
Scanner => files
Good example: https://github.com/Testy/TestyTs/blob/master/src/lib/utils/testsLoader.ts


## Queue (describe, it, ...) pushes methods into appropriate arrays

- creates TestSuite. Each TestSuite has its own describes, its and etc.
  this.describes.push(describe);
  this.its.push(it);

  How it happens here: https://github.com/philipszdavido/kwuo/blob/master/lib/index.js

- creates Map { fileName: TestSuite }


## Runner runs each queue. 
Good example: https://github.com/twosmalltrees/pretzel-test/blob/master/src/runner.ts

Goes through each fileName in the map, prepared on the previous step and run each queue.

If there're errors, it emits events about errors.
If there're successes, it emits events about successes.


## Reporter listens success and error events and logs appropriate messages.
Good example: https://github.com/twosmalltrees/pretzel-test/blob/master/src/reporter.ts


## It would be better to have additionally the Logger, but we'll stay with standard console.log for the moment.


Working principle of Trun.

Trun consists of several building blocks:

- Config;
- Scanner;
- Queue;
- Runner;
- Reporter.

Each of this part has it's own responsibility.


# Scanner

Everything starts from Scanner.

We point out the root folder for the Scanner and it should find all the files recursively accorging to the pattern (**.spec.ts, for example). 
We also should not be able to search the files from node_modules folder and user should have possibility to point out any folder to exclude scanning
files in it.

Good example: https://github.com/Testy/TestyTs/blob/master/src/lib/utils/testsLoader.ts


User should have possibility to load configurations from "trun.config.js". So, during loading phase we read this config to extract necessary options. 

Good example: https://github.com/Testy/TestyTs/blob/master/src/lib/cli/run.command.ts#L53

After Loader finishes loading files paths - it puts it into files property.

# Queue

Queue loads files with Loader and extracts loaded files paths.

The responsibility of Queue is to:
- require each test suite; 
- create for each file appropriate TestSuite instance.
- push into appropriate places (beforeEachs, its and etc.) functions to run (specs to run).
- store all tests suites into testsSuites property.


# Runner

The next step is to run all specs and it's Runner responsibility.

Runner takes all testsSuites from Queue instance and run in appropriate order all of them.

In case of successful passed tests it emmits successful event.
In case of error it emmits appropriate error event.

But it doesn't write anywhere messages. The goal is just to emit events.

# Reporter

For the logging messages the Reporter class is responsible.

It listens all possible events and logs messages in an appropriate format.



All the blocks communicate with each other through the event system:

- After Scanner finishes scanning files - it emmits an appropriate event ("scannedWithSuccess") with all founded files;

- Queue listens to the "scannedWithSuccess" event and handles putting in the queue all callbacks. After queue finishes it's part,
  it emits an appropriate event "queuedInWithSuccess"

- Runner listens to the "queuedInWithSuccess" event and runs all the tests in an appropriatte order after it was emmited.
  And on success it emits "runTestsWithSuccess" event.

- Reporter listens to the all events, emitted by all previous blocks and prints appropriate messages. 




Schema of running tests:

- Run root describe block;
- Root describe block runs all children blocks:
  -- describe
  -- afterEach
  -- afterAll
  -- beforeEach
  -- beforeAll
  -- it

In the jest all these blocks are declared here:
-- https://github.com/facebook/jest/blob/222565ab2d72ff1c3744ab9d019c5988b0daebd5/packages/jest-circus/src/index.ts

During all blocks running we write into the store current state:
-- all callbacks and their description

In jest it happens here: https://github.com/facebook/jest/blob/e8e8146ef6feacc56f9153a16c69f627cfa34d49/packages/jest-circus/src/eventHandler.ts#L37-L91

After we finish writing state for the file (in another words after we wrote all state), 
we run all blocks, taking info about them from the state.

In jest it happens here: https://github.com/facebook/jest/blob/e8e8146ef6feacc56f9153a16c69f627cfa34d49/packages/jest-circus/src/run.ts


Root describe is mandatory. If it, afterEach, afterAll runs without root describe - we throw an error.

Root describe write into the store the "currentDescribe" state. It's an object with children and description and parentDescribe.

Each it, afterEach, afterAll during running push into currentDescribe's children array.

After describe finishes execution it looks for the parentDescribe. If there's a parent describe
it sets up parentDescribe as currentDescribe and continues execution.

After all blockes finishes their execution we stop writing into the store and 
start execution of all functions, that were written into the state on the previous step.

Describe entity is the main structure test block, that can be described by next interface:

enum TestBlockType {
  Describe = 'describe',
  It = 'it',
};

enum TestHookType {
  BeforeAll = 'beforeAll',
  BeforeEach = 'beforeEach',
  AfterEach = 'afterEach', 
  AfterAll = 'afterAll',
};

interface TestBlock {
  // each "it" or "describe"  is nested into parent "describe" block
  // and is stored in it's "children" prop
  parent: DescribeBlock;
  name: string;
  fn: () => void;
  type: TestBlockType;
}

inteface TestHook {
  type: TestHookType; 
  fn: () => void;
}

interface DescribeBlock extends TestBlock {
  type: TestBllockType.Describe; 
  children: TestBlock[] 
  hooks: TestHook[];
}

interface ItBlock extends TestBlock {
  type: TestBllockType.It; 
  // we render errors not only during tests execution
  // but also after all tests run
  errors: ErrorType[];
}

Schema:

We write state of each test block into Store's state.

In the beginning of execution of each DescribeBlock we write into the "currentDescribeBlock" property
currently running DescribeBlock

In the end of execution of each DescribeBlock we write into the "currentDescribeBlock" property
parrent of the DescribeBlock, that has finished execution.

ROOT_DESCRIBE_RUN:
  - creates DescribeBlock object with appropriate props;
  - writes into Store's state this DescribeBlock into "currentDescribeBlock" property;

  - if new hook has run
    - creates appropriate TestHook object
    - writes it into it's own "hooks" prop

  - if new it has run
    - creates appropriate ItBlock object 
    - writes it into it's own "children" prop

  - if new describe has run
    - creates new DescribeBlock object;

    - writes previous DescribeBlock into it's own "parent" prop;

    - writes the current DescribeBlock into "children" prop of the previous DescribeBlock; 

    - writes into Store's state this DescribeBlock into "currentDescribeBlock" property;

    - if new hook has run
      - creates appropriate TestHook object
      - writes it into it's own "hooks" prop

    - if new it has run
      - creates appropriate ItBlock object 
      - writes it into it's own "children" prop
